// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: action.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "pose.capnp.h"

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c8af65040e5ecb13);
enum class MapType_c8af65040e5ecb13: uint16_t {
  UNCHANGED,
  COUNT_MAP,
  POINTCLOUD,
  VOXELGRID,
};
CAPNP_DECLARE_ENUM(MapType, c8af65040e5ecb13);
CAPNP_DECLARE_SCHEMA(f1d090b2c3bf545e);
CAPNP_DECLARE_SCHEMA(f2a441746f88f727);
CAPNP_DECLARE_SCHEMA(cf5efa5f93547a02);

}  // namespace schemas
}  // namespace capnp

namespace vpp_msg {

typedef ::capnp::schemas::MapType_c8af65040e5ecb13 MapType;

struct Action {
  Action() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    RELATIVE_JOINT_TARGET,
    ABSOLUTE_JOINT_TARGET,
    GOAL_POSE,
    RELATIVE_POSE,
    RESET,
  };
  struct Reset;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1d090b2c3bf545e, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Action::Reset {
  Reset() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct RandomizationParameters;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f2a441746f88f727, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Action::Reset::RandomizationParameters {
  RandomizationParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf5efa5f93547a02, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Action::Reader {
public:
  typedef Action Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isRelativeJointTarget() const;
  inline bool hasRelativeJointTarget() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getRelativeJointTarget() const;

  inline bool isAbsoluteJointTarget() const;
  inline bool hasAbsoluteJointTarget() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getAbsoluteJointTarget() const;

  inline bool isGoalPose() const;
  inline bool hasGoalPose() const;
  inline  ::vpp_msg::Pose::Reader getGoalPose() const;

  inline bool isRelativePose() const;
  inline bool hasRelativePose() const;
  inline  ::vpp_msg::Pose::Reader getRelativePose() const;

  inline bool isReset() const;
  inline typename Reset::Reader getReset() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Action::Builder {
public:
  typedef Action Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isRelativeJointTarget();
  inline bool hasRelativeJointTarget();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getRelativeJointTarget();
  inline void setRelativeJointTarget( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRelativeJointTarget(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initRelativeJointTarget(unsigned int size);
  inline void adoptRelativeJointTarget(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownRelativeJointTarget();

  inline bool isAbsoluteJointTarget();
  inline bool hasAbsoluteJointTarget();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getAbsoluteJointTarget();
  inline void setAbsoluteJointTarget( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAbsoluteJointTarget(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initAbsoluteJointTarget(unsigned int size);
  inline void adoptAbsoluteJointTarget(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownAbsoluteJointTarget();

  inline bool isGoalPose();
  inline bool hasGoalPose();
  inline  ::vpp_msg::Pose::Builder getGoalPose();
  inline void setGoalPose( ::vpp_msg::Pose::Reader value);
  inline  ::vpp_msg::Pose::Builder initGoalPose();
  inline void adoptGoalPose(::capnp::Orphan< ::vpp_msg::Pose>&& value);
  inline ::capnp::Orphan< ::vpp_msg::Pose> disownGoalPose();

  inline bool isRelativePose();
  inline bool hasRelativePose();
  inline  ::vpp_msg::Pose::Builder getRelativePose();
  inline void setRelativePose( ::vpp_msg::Pose::Reader value);
  inline  ::vpp_msg::Pose::Builder initRelativePose();
  inline void adoptRelativePose(::capnp::Orphan< ::vpp_msg::Pose>&& value);
  inline ::capnp::Orphan< ::vpp_msg::Pose> disownRelativePose();

  inline bool isReset();
  inline typename Reset::Builder getReset();
  inline typename Reset::Builder initReset();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Action::Pipeline {
public:
  typedef Action Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Action::Reset::Reader {
public:
  typedef Reset Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getRandomize() const;

  inline typename RandomizationParameters::Reader getRandomizationParameters() const;

  inline  ::vpp_msg::MapType getMapType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Action::Reset::Builder {
public:
  typedef Reset Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getRandomize();
  inline void setRandomize(bool value);

  inline typename RandomizationParameters::Builder getRandomizationParameters();
  inline typename RandomizationParameters::Builder initRandomizationParameters();

  inline  ::vpp_msg::MapType getMapType();
  inline void setMapType( ::vpp_msg::MapType value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Action::Reset::Pipeline {
public:
  typedef Reset Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename RandomizationParameters::Pipeline getRandomizationParameters();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Action::Reset::RandomizationParameters::Reader {
public:
  typedef RandomizationParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMin() const;
  inline  ::vpp_msg::Point::Reader getMin() const;

  inline bool hasMax() const;
  inline  ::vpp_msg::Point::Reader getMax() const;

  inline double getMinDist() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Action::Reset::RandomizationParameters::Builder {
public:
  typedef RandomizationParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMin();
  inline  ::vpp_msg::Point::Builder getMin();
  inline void setMin( ::vpp_msg::Point::Reader value);
  inline  ::vpp_msg::Point::Builder initMin();
  inline void adoptMin(::capnp::Orphan< ::vpp_msg::Point>&& value);
  inline ::capnp::Orphan< ::vpp_msg::Point> disownMin();

  inline bool hasMax();
  inline  ::vpp_msg::Point::Builder getMax();
  inline void setMax( ::vpp_msg::Point::Reader value);
  inline  ::vpp_msg::Point::Builder initMax();
  inline void adoptMax(::capnp::Orphan< ::vpp_msg::Point>&& value);
  inline ::capnp::Orphan< ::vpp_msg::Point> disownMax();

  inline double getMinDist();
  inline void setMinDist(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Action::Reset::RandomizationParameters::Pipeline {
public:
  typedef RandomizationParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::vpp_msg::Point::Pipeline getMin();
  inline  ::vpp_msg::Point::Pipeline getMax();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::vpp_msg::Action::Which Action::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::vpp_msg::Action::Which Action::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Action::Reader::isNone() const {
  return which() == Action::NONE;
}
inline bool Action::Builder::isNone() {
  return which() == Action::NONE;
}
inline  ::capnp::Void Action::Reader::getNone() const {
  KJ_IREQUIRE((which() == Action::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Action::Builder::getNone() {
  KJ_IREQUIRE((which() == Action::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Action::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::NONE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Action::Reader::isRelativeJointTarget() const {
  return which() == Action::RELATIVE_JOINT_TARGET;
}
inline bool Action::Builder::isRelativeJointTarget() {
  return which() == Action::RELATIVE_JOINT_TARGET;
}
inline bool Action::Reader::hasRelativeJointTarget() const {
  if (which() != Action::RELATIVE_JOINT_TARGET) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Builder::hasRelativeJointTarget() {
  if (which() != Action::RELATIVE_JOINT_TARGET) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader Action::Reader::getRelativeJointTarget() const {
  KJ_IREQUIRE((which() == Action::RELATIVE_JOINT_TARGET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder Action::Builder::getRelativeJointTarget() {
  KJ_IREQUIRE((which() == Action::RELATIVE_JOINT_TARGET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::setRelativeJointTarget( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_JOINT_TARGET);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Action::Builder::setRelativeJointTarget(::kj::ArrayPtr<const double> value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_JOINT_TARGET);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder Action::Builder::initRelativeJointTarget(unsigned int size) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_JOINT_TARGET);
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Action::Builder::adoptRelativeJointTarget(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_JOINT_TARGET);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> Action::Builder::disownRelativeJointTarget() {
  KJ_IREQUIRE((which() == Action::RELATIVE_JOINT_TARGET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Action::Reader::isAbsoluteJointTarget() const {
  return which() == Action::ABSOLUTE_JOINT_TARGET;
}
inline bool Action::Builder::isAbsoluteJointTarget() {
  return which() == Action::ABSOLUTE_JOINT_TARGET;
}
inline bool Action::Reader::hasAbsoluteJointTarget() const {
  if (which() != Action::ABSOLUTE_JOINT_TARGET) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Builder::hasAbsoluteJointTarget() {
  if (which() != Action::ABSOLUTE_JOINT_TARGET) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader Action::Reader::getAbsoluteJointTarget() const {
  KJ_IREQUIRE((which() == Action::ABSOLUTE_JOINT_TARGET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder Action::Builder::getAbsoluteJointTarget() {
  KJ_IREQUIRE((which() == Action::ABSOLUTE_JOINT_TARGET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::setAbsoluteJointTarget( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::ABSOLUTE_JOINT_TARGET);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Action::Builder::setAbsoluteJointTarget(::kj::ArrayPtr<const double> value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::ABSOLUTE_JOINT_TARGET);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder Action::Builder::initAbsoluteJointTarget(unsigned int size) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::ABSOLUTE_JOINT_TARGET);
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Action::Builder::adoptAbsoluteJointTarget(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::ABSOLUTE_JOINT_TARGET);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> Action::Builder::disownAbsoluteJointTarget() {
  KJ_IREQUIRE((which() == Action::ABSOLUTE_JOINT_TARGET),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Action::Reader::isGoalPose() const {
  return which() == Action::GOAL_POSE;
}
inline bool Action::Builder::isGoalPose() {
  return which() == Action::GOAL_POSE;
}
inline bool Action::Reader::hasGoalPose() const {
  if (which() != Action::GOAL_POSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Builder::hasGoalPose() {
  if (which() != Action::GOAL_POSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vpp_msg::Pose::Reader Action::Reader::getGoalPose() const {
  KJ_IREQUIRE((which() == Action::GOAL_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vpp_msg::Pose::Builder Action::Builder::getGoalPose() {
  KJ_IREQUIRE((which() == Action::GOAL_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::setGoalPose( ::vpp_msg::Pose::Reader value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::GOAL_POSE);
  ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vpp_msg::Pose::Builder Action::Builder::initGoalPose() {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::GOAL_POSE);
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::adoptGoalPose(
    ::capnp::Orphan< ::vpp_msg::Pose>&& value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::GOAL_POSE);
  ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vpp_msg::Pose> Action::Builder::disownGoalPose() {
  KJ_IREQUIRE((which() == Action::GOAL_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Action::Reader::isRelativePose() const {
  return which() == Action::RELATIVE_POSE;
}
inline bool Action::Builder::isRelativePose() {
  return which() == Action::RELATIVE_POSE;
}
inline bool Action::Reader::hasRelativePose() const {
  if (which() != Action::RELATIVE_POSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Builder::hasRelativePose() {
  if (which() != Action::RELATIVE_POSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vpp_msg::Pose::Reader Action::Reader::getRelativePose() const {
  KJ_IREQUIRE((which() == Action::RELATIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::vpp_msg::Pose::Builder Action::Builder::getRelativePose() {
  KJ_IREQUIRE((which() == Action::RELATIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::setRelativePose( ::vpp_msg::Pose::Reader value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_POSE);
  ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vpp_msg::Pose::Builder Action::Builder::initRelativePose() {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_POSE);
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::adoptRelativePose(
    ::capnp::Orphan< ::vpp_msg::Pose>&& value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_POSE);
  ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vpp_msg::Pose> Action::Builder::disownRelativePose() {
  KJ_IREQUIRE((which() == Action::RELATIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::vpp_msg::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Action::Reader::isReset() const {
  return which() == Action::RESET;
}
inline bool Action::Builder::isReset() {
  return which() == Action::RESET;
}
inline typename Action::Reset::Reader Action::Reader::getReset() const {
  KJ_IREQUIRE((which() == Action::RESET),
              "Must check which() before get()ing a union member.");
  return typename Action::Reset::Reader(_reader);
}
inline typename Action::Reset::Builder Action::Builder::getReset() {
  KJ_IREQUIRE((which() == Action::RESET),
              "Must check which() before get()ing a union member.");
  return typename Action::Reset::Builder(_builder);
}
inline typename Action::Reset::Builder Action::Builder::initReset() {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RESET);
  _builder.setDataField<bool>(::capnp::bounded<16>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Action::Reset::Builder(_builder);
}
inline bool Action::Reset::Reader::getRandomize() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool Action::Reset::Builder::getRandomize() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Action::Reset::Builder::setRandomize(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline typename Action::Reset::RandomizationParameters::Reader Action::Reset::Reader::getRandomizationParameters() const {
  return typename Action::Reset::RandomizationParameters::Reader(_reader);
}
inline typename Action::Reset::RandomizationParameters::Builder Action::Reset::Builder::getRandomizationParameters() {
  return typename Action::Reset::RandomizationParameters::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Action::Reset::RandomizationParameters::Pipeline Action::Reset::Pipeline::getRandomizationParameters() {
  return typename Action::Reset::RandomizationParameters::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Action::Reset::RandomizationParameters::Builder Action::Reset::Builder::initRandomizationParameters() {
  _builder.setDataField< ::uint64_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Action::Reset::RandomizationParameters::Builder(_builder);
}
inline  ::vpp_msg::MapType Action::Reset::Reader::getMapType() const {
  return _reader.getDataField< ::vpp_msg::MapType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::vpp_msg::MapType Action::Reset::Builder::getMapType() {
  return _builder.getDataField< ::vpp_msg::MapType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Action::Reset::Builder::setMapType( ::vpp_msg::MapType value) {
  _builder.setDataField< ::vpp_msg::MapType>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Action::Reset::RandomizationParameters::Reader::hasMin() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Reset::RandomizationParameters::Builder::hasMin() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::vpp_msg::Point::Reader Action::Reset::RandomizationParameters::Reader::getMin() const {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_cf5efa5f93547a02 + 48);
}
inline  ::vpp_msg::Point::Builder Action::Reset::RandomizationParameters::Builder::getMin() {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_cf5efa5f93547a02 + 48);
}
#if !CAPNP_LITE
inline  ::vpp_msg::Point::Pipeline Action::Reset::RandomizationParameters::Pipeline::getMin() {
  return  ::vpp_msg::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Action::Reset::RandomizationParameters::Builder::setMin( ::vpp_msg::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::vpp_msg::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::vpp_msg::Point::Builder Action::Reset::RandomizationParameters::Builder::initMin() {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Reset::RandomizationParameters::Builder::adoptMin(
    ::capnp::Orphan< ::vpp_msg::Point>&& value) {
  ::capnp::_::PointerHelpers< ::vpp_msg::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vpp_msg::Point> Action::Reset::RandomizationParameters::Builder::disownMin() {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Action::Reset::RandomizationParameters::Reader::hasMax() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Reset::RandomizationParameters::Builder::hasMax() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::vpp_msg::Point::Reader Action::Reset::RandomizationParameters::Reader::getMax() const {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_cf5efa5f93547a02 + 59);
}
inline  ::vpp_msg::Point::Builder Action::Reset::RandomizationParameters::Builder::getMax() {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS),
        ::capnp::schemas::bp_cf5efa5f93547a02 + 59);
}
#if !CAPNP_LITE
inline  ::vpp_msg::Point::Pipeline Action::Reset::RandomizationParameters::Pipeline::getMax() {
  return  ::vpp_msg::Point::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Action::Reset::RandomizationParameters::Builder::setMax( ::vpp_msg::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::vpp_msg::Point>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::vpp_msg::Point::Builder Action::Reset::RandomizationParameters::Builder::initMax() {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Action::Reset::RandomizationParameters::Builder::adoptMax(
    ::capnp::Orphan< ::vpp_msg::Point>&& value) {
  ::capnp::_::PointerHelpers< ::vpp_msg::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::vpp_msg::Point> Action::Reset::RandomizationParameters::Builder::disownMax() {
  return ::capnp::_::PointerHelpers< ::vpp_msg::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Action::Reset::RandomizationParameters::Reader::getMinDist() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}

inline double Action::Reset::RandomizationParameters::Builder::getMinDist() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}
inline void Action::Reset::RandomizationParameters::Builder::setMinDist(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4600877379321698714ull);
}

}  // namespace

