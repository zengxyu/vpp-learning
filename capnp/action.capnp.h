// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: action.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9bb505a50d7e0534);
enum class Direction_9bb505a50d7e0534: uint16_t {
  DO_NOTHING,
  MOVE_FORWARD,
  MOVE_BACKWARD,
  MOVE_LEFT,
  MOVE_RIGHT,
  MOVE_UP,
  MOVE_DOWN,
  ROTATE_ROLL_P,
  ROTATE_ROLL_N,
  ROTATE_PITCH_P,
  ROTATE_PITCH_N,
  ROTATE_YAW_P,
  ROTATE_YAW_N,
};
CAPNP_DECLARE_ENUM(Direction, 9bb505a50d7e0534);
CAPNP_DECLARE_SCHEMA(cd987abc124691b7);
CAPNP_DECLARE_SCHEMA(ee38debf34b2b97e);
CAPNP_DECLARE_SCHEMA(8e95810203086685);
CAPNP_DECLARE_SCHEMA(f1d090b2c3bf545e);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::Direction_9bb505a50d7e0534 Direction;

struct Point {
  Point() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cd987abc124691b7, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Quaternion {
  Quaternion() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee38debf34b2b97e, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Pose {
  Pose() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e95810203086685, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Action {
  Action() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    RESET,
    DIRECTION,
    GOAL_POSE,
    RELATIVE_POSE,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f1d090b2c3bf545e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Point::Reader {
public:
  typedef Point Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Point::Builder {
public:
  typedef Point Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getZ();
  inline void setZ(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Point::Pipeline {
public:
  typedef Point Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Quaternion::Reader {
public:
  typedef Quaternion Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getX() const;

  inline double getY() const;

  inline double getZ() const;

  inline double getW() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Quaternion::Builder {
public:
  typedef Quaternion Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getX();
  inline void setX(double value);

  inline double getY();
  inline void setY(double value);

  inline double getZ();
  inline void setZ(double value);

  inline double getW();
  inline void setW(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Quaternion::Pipeline {
public:
  typedef Quaternion Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Pose::Reader {
public:
  typedef Pose Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPosition() const;
  inline  ::Point::Reader getPosition() const;

  inline bool hasOrientation() const;
  inline  ::Quaternion::Reader getOrientation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Pose::Builder {
public:
  typedef Pose Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPosition();
  inline  ::Point::Builder getPosition();
  inline void setPosition( ::Point::Reader value);
  inline  ::Point::Builder initPosition();
  inline void adoptPosition(::capnp::Orphan< ::Point>&& value);
  inline ::capnp::Orphan< ::Point> disownPosition();

  inline bool hasOrientation();
  inline  ::Quaternion::Builder getOrientation();
  inline void setOrientation( ::Quaternion::Reader value);
  inline  ::Quaternion::Builder initOrientation();
  inline void adoptOrientation(::capnp::Orphan< ::Quaternion>&& value);
  inline ::capnp::Orphan< ::Quaternion> disownOrientation();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Pose::Pipeline {
public:
  typedef Pose Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Point::Pipeline getPosition();
  inline  ::Quaternion::Pipeline getOrientation();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Action::Reader {
public:
  typedef Action Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isReset() const;
  inline  ::capnp::Void getReset() const;

  inline bool isDirection() const;
  inline  ::Direction getDirection() const;

  inline bool isGoalPose() const;
  inline bool hasGoalPose() const;
  inline  ::Pose::Reader getGoalPose() const;

  inline bool isRelativePose() const;
  inline bool hasRelativePose() const;
  inline  ::Pose::Reader getRelativePose() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Action::Builder {
public:
  typedef Action Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isReset();
  inline  ::capnp::Void getReset();
  inline void setReset( ::capnp::Void value = ::capnp::VOID);

  inline bool isDirection();
  inline  ::Direction getDirection();
  inline void setDirection( ::Direction value);

  inline bool isGoalPose();
  inline bool hasGoalPose();
  inline  ::Pose::Builder getGoalPose();
  inline void setGoalPose( ::Pose::Reader value);
  inline  ::Pose::Builder initGoalPose();
  inline void adoptGoalPose(::capnp::Orphan< ::Pose>&& value);
  inline ::capnp::Orphan< ::Pose> disownGoalPose();

  inline bool isRelativePose();
  inline bool hasRelativePose();
  inline  ::Pose::Builder getRelativePose();
  inline void setRelativePose( ::Pose::Reader value);
  inline  ::Pose::Builder initRelativePose();
  inline void adoptRelativePose(::capnp::Orphan< ::Pose>&& value);
  inline ::capnp::Orphan< ::Pose> disownRelativePose();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Action::Pipeline {
public:
  typedef Action Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline double Point::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Point::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Point::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Point::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Point::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Point::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Point::Reader::getZ() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Point::Builder::getZ() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Point::Builder::setZ(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Quaternion::Reader::getX() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Quaternion::Builder::getX() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Quaternion::Builder::setX(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Quaternion::Reader::getY() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Quaternion::Builder::getY() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Quaternion::Builder::setY(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Quaternion::Reader::getZ() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Quaternion::Builder::getZ() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Quaternion::Builder::setZ(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Quaternion::Reader::getW() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Quaternion::Builder::getW() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Quaternion::Builder::setW(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Pose::Reader::hasPosition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Pose::Builder::hasPosition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Point::Reader Pose::Reader::getPosition() const {
  return ::capnp::_::PointerHelpers< ::Point>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Point::Builder Pose::Builder::getPosition() {
  return ::capnp::_::PointerHelpers< ::Point>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Point::Pipeline Pose::Pipeline::getPosition() {
  return  ::Point::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Pose::Builder::setPosition( ::Point::Reader value) {
  ::capnp::_::PointerHelpers< ::Point>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Point::Builder Pose::Builder::initPosition() {
  return ::capnp::_::PointerHelpers< ::Point>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Pose::Builder::adoptPosition(
    ::capnp::Orphan< ::Point>&& value) {
  ::capnp::_::PointerHelpers< ::Point>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Point> Pose::Builder::disownPosition() {
  return ::capnp::_::PointerHelpers< ::Point>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Pose::Reader::hasOrientation() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Pose::Builder::hasOrientation() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::Quaternion::Reader Pose::Reader::getOrientation() const {
  return ::capnp::_::PointerHelpers< ::Quaternion>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::Quaternion::Builder Pose::Builder::getOrientation() {
  return ::capnp::_::PointerHelpers< ::Quaternion>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Quaternion::Pipeline Pose::Pipeline::getOrientation() {
  return  ::Quaternion::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Pose::Builder::setOrientation( ::Quaternion::Reader value) {
  ::capnp::_::PointerHelpers< ::Quaternion>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::Quaternion::Builder Pose::Builder::initOrientation() {
  return ::capnp::_::PointerHelpers< ::Quaternion>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Pose::Builder::adoptOrientation(
    ::capnp::Orphan< ::Quaternion>&& value) {
  ::capnp::_::PointerHelpers< ::Quaternion>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Quaternion> Pose::Builder::disownOrientation() {
  return ::capnp::_::PointerHelpers< ::Quaternion>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::Action::Which Action::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::Action::Which Action::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Action::Reader::isNone() const {
  return which() == Action::NONE;
}
inline bool Action::Builder::isNone() {
  return which() == Action::NONE;
}
inline  ::capnp::Void Action::Reader::getNone() const {
  KJ_IREQUIRE((which() == Action::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Action::Builder::getNone() {
  KJ_IREQUIRE((which() == Action::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Action::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::NONE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Action::Reader::isReset() const {
  return which() == Action::RESET;
}
inline bool Action::Builder::isReset() {
  return which() == Action::RESET;
}
inline  ::capnp::Void Action::Reader::getReset() const {
  KJ_IREQUIRE((which() == Action::RESET),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Action::Builder::getReset() {
  KJ_IREQUIRE((which() == Action::RESET),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Action::Builder::setReset( ::capnp::Void value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RESET);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Action::Reader::isDirection() const {
  return which() == Action::DIRECTION;
}
inline bool Action::Builder::isDirection() {
  return which() == Action::DIRECTION;
}
inline  ::Direction Action::Reader::getDirection() const {
  KJ_IREQUIRE((which() == Action::DIRECTION),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::Direction Action::Builder::getDirection() {
  KJ_IREQUIRE((which() == Action::DIRECTION),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Action::Builder::setDirection( ::Direction value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::DIRECTION);
  _builder.setDataField< ::Direction>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Action::Reader::isGoalPose() const {
  return which() == Action::GOAL_POSE;
}
inline bool Action::Builder::isGoalPose() {
  return which() == Action::GOAL_POSE;
}
inline bool Action::Reader::hasGoalPose() const {
  if (which() != Action::GOAL_POSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Builder::hasGoalPose() {
  if (which() != Action::GOAL_POSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Pose::Reader Action::Reader::getGoalPose() const {
  KJ_IREQUIRE((which() == Action::GOAL_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Pose::Builder Action::Builder::getGoalPose() {
  KJ_IREQUIRE((which() == Action::GOAL_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::setGoalPose( ::Pose::Reader value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::GOAL_POSE);
  ::capnp::_::PointerHelpers< ::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Pose::Builder Action::Builder::initGoalPose() {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::GOAL_POSE);
  return ::capnp::_::PointerHelpers< ::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::adoptGoalPose(
    ::capnp::Orphan< ::Pose>&& value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::GOAL_POSE);
  ::capnp::_::PointerHelpers< ::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Pose> Action::Builder::disownGoalPose() {
  KJ_IREQUIRE((which() == Action::GOAL_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Action::Reader::isRelativePose() const {
  return which() == Action::RELATIVE_POSE;
}
inline bool Action::Builder::isRelativePose() {
  return which() == Action::RELATIVE_POSE;
}
inline bool Action::Reader::hasRelativePose() const {
  if (which() != Action::RELATIVE_POSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Action::Builder::hasRelativePose() {
  if (which() != Action::RELATIVE_POSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Pose::Reader Action::Reader::getRelativePose() const {
  KJ_IREQUIRE((which() == Action::RELATIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Pose>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Pose::Builder Action::Builder::getRelativePose() {
  KJ_IREQUIRE((which() == Action::RELATIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Pose>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::setRelativePose( ::Pose::Reader value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_POSE);
  ::capnp::_::PointerHelpers< ::Pose>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Pose::Builder Action::Builder::initRelativePose() {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_POSE);
  return ::capnp::_::PointerHelpers< ::Pose>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Action::Builder::adoptRelativePose(
    ::capnp::Orphan< ::Pose>&& value) {
  _builder.setDataField<Action::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Action::RELATIVE_POSE);
  ::capnp::_::PointerHelpers< ::Pose>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Pose> Action::Builder::disownRelativePose() {
  KJ_IREQUIRE((which() == Action::RELATIVE_POSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Pose>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


